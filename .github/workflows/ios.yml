name: "Build iOS app"

on:
  # manual trigger but change to any supported event
  # see addl: https://www.andrewhoog.com/post/how-to-build-react-native-android-app-with-github-actions/#3-run-build-workflow
#  workflow_dispatch:
#    branches: [main]
  push:
    branches:
      - main

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      # Check Xcode version
      - name: Check Xcode version
        run: /usr/bin/xcodebuild -version

      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install CocoaPods dependencies
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod install

      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64_LIVE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      # Build archive
      - name: Build archive
        run: |
          xcodebuild -workspace "FingerPrintTrackingDemo.xcworkspace" \
          -scheme "FingerPrintTrackingDemo" \
          -archivePath $RUNNER_TEMP/finger.xcarchive \
          -sdk iphoneos \
          -configuration Release \
          -destination generic/platform=iOS \
          clean archive

      # Export IPA
      - name: Export IPA
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST_LIVE }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/finger.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build

      # Upload application
#      - name: Upload application
#        uses: actions/upload-artifact@v3
#        with:
#          name: app
#          path: ${{ runner.temp }}/build/advanceliens.ipa
#          # you can also archive the entire directory
#          # path: ${{ runner.temp }}/build
#          retention-days: 3
#
#      # Cleanup: Remo
#      - name: Clean up keychain and provisioning profile
#        if: ${{ always() }}
#        run: |
#          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
#          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
#
#      # https://github.com/Apple-Actions/upload-testflight-build
#      - name: 'Upload app to TestFlight'
#        uses: apple-actions/upload-testflight-build@v1
#        with:
#          app-path: 'path/to/application.ipa'
#          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
#          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
#          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
